package com.swmansion.rnscreens;

import android.content.Context;
import android.view.ViewGroup;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.StateWrapper;
import com.facebook.react.uimanager.ViewProps;
import kotlin.Metadata;

/* compiled from: FabricEnabledHeaderConfigViewGroup.kt */
@Metadata(d1 = {"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0007\n\u0002\b\u0004\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0007\b&\u0018\u0000 \u00182\u00020\u0001:\u0001\u0018B\u0011\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003¢\u0006\u0004\b\u0004\u0010\u0005J\u0010\u0010\r\u001a\u00020\u000e2\b\u0010\u000f\u001a\u0004\u0018\u00010\u0007J\u0016\u0010\u0010\u001a\u00020\u000e2\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u0012J&\u0010\u0014\u001a\u00020\u000e2\u0006\u0010\u0015\u001a\u00020\u00122\u0006\u0010\u0016\u001a\u00020\u00122\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u0012J(\u0010\u0017\u001a\u00020\u000e2\u0006\u0010\u0015\u001a\u00020\u00122\u0006\u0010\u0016\u001a\u00020\u00122\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u0012H\u0007R\u0010\u0010\u0006\u001a\u0004\u0018\u00010\u0007X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000¨\u0006\u0019"}, d2 = {"Lcom/swmansion/rnscreens/FabricEnabledHeaderConfigViewGroup;", "Landroid/view/ViewGroup;", "context", "Landroid/content/Context;", "<init>", "(Landroid/content/Context;)V", "mStateWrapper", "Lcom/facebook/react/uimanager/StateWrapper;", "lastWidth", "", "lastHeight", "lastPaddingStart", "lastPaddingEnd", "setStateWrapper", "", "wrapper", "updatePaddings", ViewProps.PADDING_START, "", ViewProps.PADDING_END, "updateHeaderConfigState", "width", "height", "updateState", "Companion", "react-native-screens_release"}, k = 1, mv = {2, 0, 0}, xi = 48)
/* loaded from: classes.dex */
public abstract class FabricEnabledHeaderConfigViewGroup extends ViewGroup {
    private static final float DELTA = 0.9f;
    private float lastHeight;
    private float lastPaddingEnd;
    private float lastPaddingStart;
    private float lastWidth;
    private StateWrapper mStateWrapper;

    public final void updatePaddings(int paddingStart, int paddingEnd) {
    }

    public FabricEnabledHeaderConfigViewGroup(Context context) {
        super(context);
    }

    public final void setStateWrapper(StateWrapper wrapper) {
        this.mStateWrapper = wrapper;
    }

    public final void updateHeaderConfigState(int width, int height, int paddingStart, int paddingEnd) {
        updateState(width, height, paddingStart, paddingEnd);
    }

    public final void updateState(int width, int height, int paddingStart, int paddingEnd) {
        float dIPFromPixel = PixelUtil.toDIPFromPixel(width);
        float dIPFromPixel2 = PixelUtil.toDIPFromPixel(height);
        float dIPFromPixel3 = PixelUtil.toDIPFromPixel(paddingStart);
        float dIPFromPixel4 = PixelUtil.toDIPFromPixel(paddingEnd);
        if (Math.abs(this.lastWidth - dIPFromPixel) >= DELTA || Math.abs(this.lastHeight - dIPFromPixel2) >= DELTA || Math.abs(this.lastPaddingStart - dIPFromPixel3) >= DELTA || Math.abs(this.lastPaddingEnd - dIPFromPixel4) >= DELTA) {
            this.lastWidth = dIPFromPixel;
            this.lastHeight = dIPFromPixel2;
            this.lastPaddingStart = dIPFromPixel3;
            this.lastPaddingEnd = dIPFromPixel4;
            WritableNativeMap writableNativeMap = new WritableNativeMap();
            writableNativeMap.putDouble("frameWidth", dIPFromPixel);
            writableNativeMap.putDouble("frameHeight", dIPFromPixel2);
            writableNativeMap.putDouble(ViewProps.PADDING_START, dIPFromPixel3);
            writableNativeMap.putDouble(ViewProps.PADDING_END, dIPFromPixel4);
            WritableNativeMap writableNativeMap2 = writableNativeMap;
            StateWrapper stateWrapper = this.mStateWrapper;
            if (stateWrapper != null) {
                stateWrapper.updateState(writableNativeMap2);
            }
        }
    }
}
