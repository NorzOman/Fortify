package com.swmansion.rnscreens;

import android.view.ViewGroup;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.StateWrapper;
import kotlin.Metadata;

/* compiled from: FabricEnabledViewGroup.kt */
@Metadata(d1 = {"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0007\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0004\b&\u0018\u00002\u00020\u0001B\u0011\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003¢\u0006\u0004\b\u0004\u0010\u0005J\u0010\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0007J \u0010\u000e\u001a\u00020\f2\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u0010H\u0004J \u0010\u0013\u001a\u00020\f2\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u0010H\u0007R\u0010\u0010\u0006\u001a\u0004\u0018\u00010\u0007X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\tX\u0082\u000e¢\u0006\u0002\n\u0000¨\u0006\u0014"}, d2 = {"Lcom/swmansion/rnscreens/FabricEnabledViewGroup;", "Landroid/view/ViewGroup;", "context", "Lcom/facebook/react/bridge/ReactContext;", "<init>", "(Lcom/facebook/react/bridge/ReactContext;)V", "mStateWrapper", "Lcom/facebook/react/uimanager/StateWrapper;", "lastSetWidth", "", "lastSetHeight", "setStateWrapper", "", "wrapper", "updateScreenSizeFabric", "width", "", "height", "headerHeight", "updateState", "react-native-screens_release"}, k = 1, mv = {2, 0, 0}, xi = 48)
/* loaded from: classes.dex */
public abstract class FabricEnabledViewGroup extends ViewGroup {
    private float lastSetHeight;
    private float lastSetWidth;
    private StateWrapper mStateWrapper;

    public FabricEnabledViewGroup(ReactContext reactContext) {
        super(reactContext);
    }

    public final void setStateWrapper(StateWrapper wrapper) {
        this.mStateWrapper = wrapper;
    }

    protected final void updateScreenSizeFabric(int width, int height, int headerHeight) {
        updateState(width, height, headerHeight);
    }

    public final void updateState(int width, int height, int headerHeight) {
        float dIPFromPixel = PixelUtil.toDIPFromPixel(width);
        float dIPFromPixel2 = PixelUtil.toDIPFromPixel(height);
        float dIPFromPixel3 = PixelUtil.toDIPFromPixel(headerHeight);
        if (Math.abs(this.lastSetWidth - dIPFromPixel) >= 0.9f || Math.abs(this.lastSetHeight - dIPFromPixel2) >= 0.9f) {
            this.lastSetWidth = dIPFromPixel;
            this.lastSetHeight = dIPFromPixel2;
            WritableNativeMap writableNativeMap = new WritableNativeMap();
            writableNativeMap.putDouble("frameWidth", dIPFromPixel);
            writableNativeMap.putDouble("frameHeight", dIPFromPixel2);
            writableNativeMap.putDouble("contentOffsetX", 0.0d);
            writableNativeMap.putDouble("contentOffsetY", dIPFromPixel3);
            WritableNativeMap writableNativeMap2 = writableNativeMap;
            StateWrapper stateWrapper = this.mStateWrapper;
            if (stateWrapper != null) {
                stateWrapper.updateState(writableNativeMap2);
            }
        }
    }
}
