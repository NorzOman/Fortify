package com.facebook.react.jstasks;

import android.util.SparseArray;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactSoftExceptionLogger;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.modules.appregistry.AppRegistry;
import java.lang.ref.WeakReference;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.atomic.AtomicInteger;
import kotlin.Metadata;
import kotlin.jvm.JvmStatic;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: HeadlessJsTaskContext.kt */
@Metadata(d1 = {"\u0000\\\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010%\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\t\n\u0002\u0010\t\n\u0002\b\u0002\u0018\u0000 %2\u00020\u0001:\u0001%B\u0011\b\u0002\u0012\u0006\u0010\u0002\u001a\u00020\u0003¢\u0006\u0004\b\u0004\u0010\u0005J\u000e\u0010\u0015\u001a\u00020\u00162\u0006\u0010\u0017\u001a\u00020\nJ\u000e\u0010\u0018\u001a\u00020\u00162\u0006\u0010\u0017\u001a\u00020\nJ\u0006\u0010\u0019\u001a\u00020\u001aJ\u000e\u0010\u001b\u001a\u00020\u000e2\u0006\u0010\u001c\u001a\u00020\u0011J\u0018\u0010\u001b\u001a\u00020\u00162\u0006\u0010\u001c\u001a\u00020\u00112\u0006\u0010\u001d\u001a\u00020\u000eH\u0002J\u000e\u0010\u001e\u001a\u00020\u001a2\u0006\u0010\u001d\u001a\u00020\u000eJ\u000e\u0010\u001f\u001a\u00020\u00162\u0006\u0010\u001d\u001a\u00020\u000eJ\u0010\u0010 \u001a\u00020\u00162\u0006\u0010\u001d\u001a\u00020\u000eH\u0002J\u000e\u0010!\u001a\u00020\u001a2\u0006\u0010\u001d\u001a\u00020\u000eJ\u0018\u0010\"\u001a\u00020\u00162\u0006\u0010\u001d\u001a\u00020\u000e2\u0006\u0010#\u001a\u00020$H\u0002R\u001c\u0010\u0002\u001a\u0010\u0012\f\u0012\n \u0007*\u0004\u0018\u00010\u00030\u00030\u0006X\u0082\u0004¢\u0006\u0002\n\u0000R\u0014\u0010\b\u001a\b\u0012\u0004\u0012\u00020\n0\tX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\fX\u0082\u0004¢\u0006\u0002\n\u0000R\u0014\u0010\r\u001a\b\u0012\u0004\u0012\u00020\u000e0\tX\u0082\u0004¢\u0006\u0002\n\u0000R\u001a\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00110\u0010X\u0082\u0004¢\u0006\u0002\n\u0000R\u0014\u0010\u0012\u001a\b\u0012\u0004\u0012\u00020\u00140\u0013X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006&"}, d2 = {"Lcom/facebook/react/jstasks/HeadlessJsTaskContext;", "", "reactContext", "Lcom/facebook/react/bridge/ReactContext;", "<init>", "(Lcom/facebook/react/bridge/ReactContext;)V", "Ljava/lang/ref/WeakReference;", "kotlin.jvm.PlatformType", "headlessJsTaskEventListeners", "", "Lcom/facebook/react/jstasks/HeadlessJsTaskEventListener;", "lastTaskId", "Ljava/util/concurrent/atomic/AtomicInteger;", "activeTasks", "", "activeTaskConfigs", "", "Lcom/facebook/react/jstasks/HeadlessJsTaskConfig;", "taskTimeouts", "Landroid/util/SparseArray;", "Ljava/lang/Runnable;", "addTaskEventListener", "", "listener", "removeTaskEventListener", "hasActiveTasks", "", "startTask", "taskConfig", "taskId", "retryTask", "finishTask", "removeTimeout", "isTaskRunning", "scheduleTaskTimeout", "timeout", "", "Companion", "ReactAndroid_release"}, k = 1, mv = {2, 0, 0}, xi = 48)
/* loaded from: classes.dex */
public final class HeadlessJsTaskContext {

    /* renamed from: Companion, reason: from kotlin metadata */
    public static final Companion INSTANCE = new Companion(null);
    private static final WeakHashMap<ReactContext, HeadlessJsTaskContext> INSTANCES = new WeakHashMap<>();
    private final Map<Integer, HeadlessJsTaskConfig> activeTaskConfigs;
    private final Set<Integer> activeTasks;
    private final Set<HeadlessJsTaskEventListener> headlessJsTaskEventListeners;
    private final AtomicInteger lastTaskId;
    private final WeakReference<ReactContext> reactContext;
    private final SparseArray<Runnable> taskTimeouts;

    public /* synthetic */ HeadlessJsTaskContext(ReactContext reactContext, DefaultConstructorMarker defaultConstructorMarker) {
        this(reactContext);
    }

    @JvmStatic
    public static final HeadlessJsTaskContext getInstance(ReactContext reactContext) {
        return INSTANCE.getInstance(reactContext);
    }

    private HeadlessJsTaskContext(ReactContext reactContext) {
        this.reactContext = new WeakReference<>(reactContext);
        this.headlessJsTaskEventListeners = new CopyOnWriteArraySet();
        this.lastTaskId = new AtomicInteger(0);
        this.activeTasks = new CopyOnWriteArraySet();
        this.activeTaskConfigs = new ConcurrentHashMap();
        this.taskTimeouts = new SparseArray<>();
    }

    public final synchronized void addTaskEventListener(HeadlessJsTaskEventListener listener) {
        Intrinsics.checkNotNullParameter(listener, "listener");
        this.headlessJsTaskEventListeners.add(listener);
        Iterator<Integer> it = this.activeTasks.iterator();
        while (it.hasNext()) {
            listener.onHeadlessJsTaskStart(it.next().intValue());
        }
    }

    public final void removeTaskEventListener(HeadlessJsTaskEventListener listener) {
        Intrinsics.checkNotNullParameter(listener, "listener");
        this.headlessJsTaskEventListeners.remove(listener);
    }

    public final boolean hasActiveTasks() {
        return !this.activeTasks.isEmpty();
    }

    public final synchronized int startTask(HeadlessJsTaskConfig taskConfig) {
        int iIncrementAndGet;
        Intrinsics.checkNotNullParameter(taskConfig, "taskConfig");
        iIncrementAndGet = this.lastTaskId.incrementAndGet();
        startTask(taskConfig, iIncrementAndGet);
        return iIncrementAndGet;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final synchronized void startTask(HeadlessJsTaskConfig taskConfig, int taskId) {
        UiThreadUtil.assertOnUiThread();
        ReactContext reactContext = (ReactContext) Assertions.assertNotNull(this.reactContext.get(), "Tried to start a task on a react context that has already been destroyed");
        if (reactContext.getLifecycleState() == LifecycleState.RESUMED && !taskConfig.getIsAllowedInForeground()) {
            throw new IllegalStateException(("Tried to start task " + taskConfig.getTaskKey() + " while in foreground, but this is not allowed.").toString());
        }
        this.activeTasks.add(Integer.valueOf(taskId));
        this.activeTaskConfigs.put(Integer.valueOf(taskId), new HeadlessJsTaskConfig(taskConfig));
        if (reactContext.hasActiveReactInstance()) {
            ((AppRegistry) reactContext.getJSModule(AppRegistry.class)).startHeadlessTask(taskId, taskConfig.getTaskKey(), taskConfig.getData());
        } else {
            ReactSoftExceptionLogger.logSoftException("HeadlessJsTaskContext", new RuntimeException("Cannot start headless task, CatalystInstance not available"));
        }
        if (taskConfig.getTimeout() > 0) {
            scheduleTaskTimeout(taskId, taskConfig.getTimeout());
        }
        Iterator<HeadlessJsTaskEventListener> it = this.headlessJsTaskEventListeners.iterator();
        while (it.hasNext()) {
            it.next().onHeadlessJsTaskStart(taskId);
        }
    }

    public final synchronized boolean retryTask(final int taskId) {
        HeadlessJsTaskConfig headlessJsTaskConfig = this.activeTaskConfigs.get(Integer.valueOf(taskId));
        if (headlessJsTaskConfig == null) {
            throw new IllegalStateException(("Tried to retrieve non-existent task config with id " + taskId + ".").toString());
        }
        HeadlessJsTaskRetryPolicy retryPolicy = headlessJsTaskConfig.getRetryPolicy();
        if (retryPolicy != null && retryPolicy.canRetry()) {
            removeTimeout(taskId);
            final HeadlessJsTaskConfig headlessJsTaskConfig2 = new HeadlessJsTaskConfig(headlessJsTaskConfig.getTaskKey(), headlessJsTaskConfig.getData(), headlessJsTaskConfig.getTimeout(), headlessJsTaskConfig.getIsAllowedInForeground(), retryPolicy.update());
            UiThreadUtil.runOnUiThread(new Runnable() { // from class: com.facebook.react.jstasks.HeadlessJsTaskContext$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    this.f$0.startTask(headlessJsTaskConfig2, taskId);
                }
            }, retryPolicy.getDelay());
            return true;
        }
        return false;
    }

    public final synchronized void finishTask(final int taskId) {
        boolean zRemove = this.activeTasks.remove(Integer.valueOf(taskId));
        this.activeTaskConfigs.remove(Integer.valueOf(taskId));
        removeTimeout(taskId);
        if (zRemove) {
            UiThreadUtil.runOnUiThread(new Runnable() { // from class: com.facebook.react.jstasks.HeadlessJsTaskContext$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    HeadlessJsTaskContext.finishTask$lambda$4(this.f$0, taskId);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static final void finishTask$lambda$4(HeadlessJsTaskContext headlessJsTaskContext, int i) {
        Iterator<HeadlessJsTaskEventListener> it = headlessJsTaskContext.headlessJsTaskEventListeners.iterator();
        while (it.hasNext()) {
            it.next().onHeadlessJsTaskFinish(i);
        }
    }

    private final void removeTimeout(int taskId) {
        Runnable runnable = this.taskTimeouts.get(taskId);
        if (runnable != null) {
            UiThreadUtil.removeOnUiThread(runnable);
            this.taskTimeouts.remove(taskId);
        }
    }

    public final synchronized boolean isTaskRunning(int taskId) {
        return this.activeTasks.contains(Integer.valueOf(taskId));
    }

    private final void scheduleTaskTimeout(final int taskId, long timeout) {
        Runnable runnable = new Runnable() { // from class: com.facebook.react.jstasks.HeadlessJsTaskContext$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                this.f$0.finishTask(taskId);
            }
        };
        this.taskTimeouts.append(taskId, runnable);
        UiThreadUtil.runOnUiThread(runnable, timeout);
    }

    /* compiled from: HeadlessJsTaskContext.kt */
    @Metadata(d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\b\u0086\u0003\u0018\u00002\u00020\u0001B\t\b\u0002¢\u0006\u0004\b\u0002\u0010\u0003J\u0010\u0010\b\u001a\u00020\u00072\u0006\u0010\t\u001a\u00020\u0006H\u0007R\u001a\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006\n"}, d2 = {"Lcom/facebook/react/jstasks/HeadlessJsTaskContext$Companion;", "", "<init>", "()V", "INSTANCES", "Ljava/util/WeakHashMap;", "Lcom/facebook/react/bridge/ReactContext;", "Lcom/facebook/react/jstasks/HeadlessJsTaskContext;", "getInstance", "context", "ReactAndroid_release"}, k = 1, mv = {2, 0, 0}, xi = 48)
    public static final class Companion {
        public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
            this();
        }

        private Companion() {
        }

        @JvmStatic
        public final HeadlessJsTaskContext getInstance(ReactContext context) {
            Intrinsics.checkNotNullParameter(context, "context");
            WeakHashMap weakHashMap = HeadlessJsTaskContext.INSTANCES;
            Object headlessJsTaskContext = weakHashMap.get(context);
            if (headlessJsTaskContext == null) {
                headlessJsTaskContext = new HeadlessJsTaskContext(context, null);
                weakHashMap.put(context, headlessJsTaskContext);
            }
            return (HeadlessJsTaskContext) headlessJsTaskContext;
        }
    }
}
