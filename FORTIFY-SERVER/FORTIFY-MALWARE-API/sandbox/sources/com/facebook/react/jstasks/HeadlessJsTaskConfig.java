package com.facebook.react.jstasks;

import com.facebook.common.util.UriUtil;
import com.facebook.react.bridge.WritableMap;
import kotlin.Metadata;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: HeadlessJsTaskConfig.kt */
@Metadata(d1 = {"\u0000*\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u000e\u0018\u00002\u00020\u0001B9\b\u0007\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\b\b\u0002\u0010\u0006\u001a\u00020\u0007\u0012\b\b\u0002\u0010\b\u001a\u00020\t\u0012\n\b\u0002\u0010\n\u001a\u0004\u0018\u00010\u000b¢\u0006\u0004\b\f\u0010\rB\u0011\b\u0016\u0012\u0006\u0010\u000e\u001a\u00020\u0000¢\u0006\u0004\b\f\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003¢\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u0011\u0010\u0004\u001a\u00020\u0005¢\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013R\u0011\u0010\u0006\u001a\u00020\u0007¢\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u0011\u0010\b\u001a\u00020\t¢\u0006\b\n\u0000\u001a\u0004\b\b\u0010\u0016R\u0013\u0010\n\u001a\u0004\u0018\u00010\u000b¢\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\u0018¨\u0006\u0019"}, d2 = {"Lcom/facebook/react/jstasks/HeadlessJsTaskConfig;", "", "taskKey", "", UriUtil.DATA_SCHEME, "Lcom/facebook/react/bridge/WritableMap;", "timeout", "", "isAllowedInForeground", "", "retryPolicy", "Lcom/facebook/react/jstasks/HeadlessJsTaskRetryPolicy;", "<init>", "(Ljava/lang/String;Lcom/facebook/react/bridge/WritableMap;JZLcom/facebook/react/jstasks/HeadlessJsTaskRetryPolicy;)V", "source", "(Lcom/facebook/react/jstasks/HeadlessJsTaskConfig;)V", "getTaskKey", "()Ljava/lang/String;", "getData", "()Lcom/facebook/react/bridge/WritableMap;", "getTimeout", "()J", "()Z", "getRetryPolicy", "()Lcom/facebook/react/jstasks/HeadlessJsTaskRetryPolicy;", "ReactAndroid_release"}, k = 1, mv = {2, 0, 0}, xi = 48)
/* loaded from: classes.dex */
public final class HeadlessJsTaskConfig {
    private final WritableMap data;
    private final boolean isAllowedInForeground;
    private final HeadlessJsTaskRetryPolicy retryPolicy;
    private final String taskKey;
    private final long timeout;

    /* JADX WARN: 'this' call moved to the top of the method (can break code semantics) */
    public HeadlessJsTaskConfig(String taskKey, WritableMap data) {
        this(taskKey, data, 0L, false, null, 28, null);
        Intrinsics.checkNotNullParameter(taskKey, "taskKey");
        Intrinsics.checkNotNullParameter(data, "data");
    }

    /* JADX WARN: 'this' call moved to the top of the method (can break code semantics) */
    public HeadlessJsTaskConfig(String taskKey, WritableMap data, long j) {
        this(taskKey, data, j, false, null, 24, null);
        Intrinsics.checkNotNullParameter(taskKey, "taskKey");
        Intrinsics.checkNotNullParameter(data, "data");
    }

    /* JADX WARN: 'this' call moved to the top of the method (can break code semantics) */
    public HeadlessJsTaskConfig(String taskKey, WritableMap data, long j, boolean z) {
        this(taskKey, data, j, z, null, 16, null);
        Intrinsics.checkNotNullParameter(taskKey, "taskKey");
        Intrinsics.checkNotNullParameter(data, "data");
    }

    public HeadlessJsTaskConfig(String taskKey, WritableMap data, long j, boolean z, HeadlessJsTaskRetryPolicy headlessJsTaskRetryPolicy) {
        Intrinsics.checkNotNullParameter(taskKey, "taskKey");
        Intrinsics.checkNotNullParameter(data, "data");
        this.taskKey = taskKey;
        this.data = data;
        this.timeout = j;
        this.isAllowedInForeground = z;
        this.retryPolicy = headlessJsTaskRetryPolicy;
    }

    public final String getTaskKey() {
        return this.taskKey;
    }

    public final WritableMap getData() {
        return this.data;
    }

    public final long getTimeout() {
        return this.timeout;
    }

    /* renamed from: isAllowedInForeground, reason: from getter */
    public final boolean getIsAllowedInForeground() {
        return this.isAllowedInForeground;
    }

    public /* synthetic */ HeadlessJsTaskConfig(String str, WritableMap writableMap, long j, boolean z, NoRetryPolicy noRetryPolicy, int i, DefaultConstructorMarker defaultConstructorMarker) {
        this(str, writableMap, (i & 4) != 0 ? 0L : j, (i & 8) != 0 ? false : z, (i & 16) != 0 ? NoRetryPolicy.INSTANCE : noRetryPolicy);
    }

    public final HeadlessJsTaskRetryPolicy getRetryPolicy() {
        return this.retryPolicy;
    }

    /* JADX WARN: Illegal instructions before constructor call */
    public HeadlessJsTaskConfig(HeadlessJsTaskConfig source) {
        Intrinsics.checkNotNullParameter(source, "source");
        String str = source.taskKey;
        WritableMap writableMapCopy = source.data.copy();
        long j = source.timeout;
        boolean z = source.isAllowedInForeground;
        HeadlessJsTaskRetryPolicy headlessJsTaskRetryPolicy = source.retryPolicy;
        this(str, writableMapCopy, j, z, headlessJsTaskRetryPolicy != null ? headlessJsTaskRetryPolicy.copy() : null);
    }
}
