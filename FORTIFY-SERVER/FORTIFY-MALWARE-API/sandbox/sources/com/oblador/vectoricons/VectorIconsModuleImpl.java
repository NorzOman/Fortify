package com.oblador.vectoricons;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import com.facebook.react.views.text.ReactFontManager;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/* loaded from: classes.dex */
public class VectorIconsModuleImpl {
    public static final String NAME = "RNVectorIcons";
    private static final Map<String, Typeface> sTypefaceCache = new HashMap();

    public static String getImageForFont(String str, String str2, Integer num, Integer num2, Context context) throws Throwable {
        FileOutputStream fileOutputStream;
        Throwable th;
        String str3 = context.getCacheDir().getAbsolutePath() + "/";
        float f = context.getResources().getDisplayMetrics().density;
        int i = (int) f;
        String str4 = "@" + (f == ((float) i) ? Integer.toString(i) : Float.toString(f)) + "x";
        int iRound = Math.round(num.intValue() * f);
        String str5 = str3 + Integer.toString((str + ":" + str2 + ":" + num2).hashCode(), 32) + "_" + Integer.toString(num.intValue()) + str4 + ".png";
        String str6 = "file://" + str5;
        File file = new File(str5);
        if (file.exists()) {
            return str6;
        }
        Typeface typeface = ReactFontManager.getInstance().getTypeface(str, 0, context.getAssets());
        Paint paint = new Paint();
        paint.setTypeface(typeface);
        paint.setColor(num2.intValue());
        paint.setTextSize(iRound);
        paint.setAntiAlias(true);
        paint.getTextBounds(str2, 0, str2.length(), new Rect());
        int i2 = iRound - ((int) paint.getFontMetrics().bottom);
        Bitmap bitmapCreateBitmap = Bitmap.createBitmap(iRound, iRound, Bitmap.Config.ARGB_8888);
        new Canvas(bitmapCreateBitmap).drawText(str2, 0, i2, paint);
        try {
            fileOutputStream = new FileOutputStream(file);
            try {
                bitmapCreateBitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
                fileOutputStream.flush();
                fileOutputStream.close();
                return str6;
            } catch (Throwable th2) {
                th = th2;
                if (fileOutputStream != null) {
                    try {
                        fileOutputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                throw th;
            }
        } catch (Throwable th3) {
            fileOutputStream = null;
            th = th3;
        }
    }
}
