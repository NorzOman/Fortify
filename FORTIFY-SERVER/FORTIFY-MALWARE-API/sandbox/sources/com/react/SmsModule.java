package com.react;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.net.Uri;
import android.telephony.SmsManager;
import androidx.core.view.accessibility.AccessibilityEventCompat;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* loaded from: classes.dex */
public class SmsModule extends ReactContextBaseJavaModule {
    private static Context context;
    private Callback cb_autoSend_err;
    private Callback cb_autoSend_succ;
    Activity mActivity;
    private ReactContext mReactContext;
    private Cursor smsCursor;
    private Map<Long, String> smsList;
    private Map<Long, Object> smsListBody;

    public SmsModule(ReactApplicationContext reactApplicationContext) {
        super(reactApplicationContext);
        this.mActivity = null;
        this.cb_autoSend_succ = null;
        this.cb_autoSend_err = null;
        this.mReactContext = reactApplicationContext;
        this.smsList = new HashMap();
        context = reactApplicationContext.getApplicationContext();
    }

    @Override // com.facebook.react.bridge.NativeModule
    public String getName() {
        return "Sms";
    }

    @ReactMethod
    public void list(String str, Callback callback, Callback callback2) {
        Callback callback3;
        int iOptInt;
        String str2;
        int iOptInt2;
        int i;
        String str3;
        String str4;
        String str5;
        String str6;
        String str7;
        String str8;
        boolean zEquals;
        String str9;
        String str10 = "thread_id";
        String str11 = "_id";
        try {
            JSONObject jSONObject = new JSONObject(str);
            String strOptString = jSONObject.has("box") ? jSONObject.optString("box") : "inbox";
            if (jSONObject.has("read")) {
                try {
                    iOptInt = jSONObject.optInt("read");
                } catch (JSONException e) {
                    e = e;
                    callback3 = callback;
                    callback3.invoke(e.getMessage());
                }
            } else {
                iOptInt = -1;
            }
            if (jSONObject.has("_id")) {
                str2 = "read";
                iOptInt2 = jSONObject.optInt("_id");
            } else {
                str2 = "read";
                iOptInt2 = -1;
            }
            int iOptInt3 = jSONObject.has("thread_id") ? jSONObject.optInt("thread_id") : -1;
            String strOptString2 = jSONObject.optString("address");
            String str12 = "address";
            String strOptString3 = jSONObject.optString("body");
            String str13 = "body";
            String strOptString4 = jSONObject.optString("bodyRegex");
            int iOptInt4 = jSONObject.has("indexFrom") ? jSONObject.optInt("indexFrom") : 0;
            int iOptInt5 = jSONObject.has("maxCount") ? jSONObject.optInt("maxCount") : -1;
            String strOptString5 = jSONObject.has("selection") ? jSONObject.optString("selection") : "";
            String strOptString6 = jSONObject.has("sortOrder") ? jSONObject.optString("sortOrder") : null;
            long jOptLong = jSONObject.has("maxDate") ? jSONObject.optLong("maxDate") : -1L;
            long jOptLong2 = jSONObject.has("minDate") ? jSONObject.optLong("minDate") : -1L;
            Cursor cursorQuery = context.getContentResolver().query(Uri.parse("content://sms/" + strOptString), null, strOptString5, null, strOptString6);
            JSONArray jSONArray = new JSONArray();
            int i2 = 0;
            while (cursorQuery != null) {
                if (!cursorQuery.moveToNext()) {
                    break;
                }
                if (iOptInt2 > -1) {
                    boolean z = iOptInt2 == cursorQuery.getInt(cursorQuery.getColumnIndex(str11));
                    str3 = str2;
                    str4 = str10;
                    str5 = str12;
                    str6 = str11;
                    str7 = str13;
                    str8 = strOptString2;
                    zEquals = z;
                    i = iOptInt3;
                } else {
                    i = iOptInt3;
                    if (i > -1) {
                        str9 = str13;
                        str8 = strOptString2;
                        zEquals = i == cursorQuery.getInt(cursorQuery.getColumnIndex(str10));
                        str3 = str2;
                        str4 = str10;
                    } else if (iOptInt > -1) {
                        str3 = str2;
                        str4 = str10;
                        str9 = str13;
                        str8 = strOptString2;
                        zEquals = iOptInt == cursorQuery.getInt(cursorQuery.getColumnIndex(str3));
                    } else {
                        str3 = str2;
                        str4 = str10;
                        if (strOptString2 == null || strOptString2.isEmpty()) {
                            str5 = str12;
                            str6 = str11;
                            if (strOptString3 == null || strOptString3.isEmpty()) {
                                str7 = str13;
                                str8 = strOptString2;
                                zEquals = true;
                            } else {
                                str7 = str13;
                                str8 = strOptString2;
                                zEquals = strOptString3.equals(cursorQuery.getString(cursorQuery.getColumnIndex(str7)).trim());
                            }
                        } else {
                            str5 = str12;
                            str6 = str11;
                            str9 = str13;
                            str8 = strOptString2;
                            zEquals = strOptString2.equals(cursorQuery.getString(cursorQuery.getColumnIndex(str5)).trim());
                            str7 = str9;
                        }
                    }
                    str5 = str12;
                    str6 = str11;
                    str7 = str9;
                }
                if (strOptString4 != null && !strOptString4.isEmpty()) {
                    zEquals = zEquals && cursorQuery.getString(cursorQuery.getColumnIndex(str7)).matches(strOptString4);
                }
                String str14 = strOptString3;
                if (jOptLong > -1) {
                    zEquals = zEquals && jOptLong >= cursorQuery.getLong(cursorQuery.getColumnIndex("date"));
                }
                if (jOptLong2 > -1) {
                    zEquals = zEquals && jOptLong2 <= cursorQuery.getLong(cursorQuery.getColumnIndex("date"));
                }
                if (zEquals) {
                    if (i2 >= iOptInt4) {
                        if (iOptInt5 > 0 && i2 >= iOptInt4 + iOptInt5) {
                            break;
                        }
                        try {
                            jSONArray.put(getJsonFromCursor(cursorQuery));
                        } catch (JSONException e2) {
                            e = e2;
                            callback3 = callback;
                            callback3.invoke(e.getMessage());
                        }
                    }
                    i2++;
                }
                iOptInt3 = i;
                strOptString2 = str8;
                strOptString3 = str14;
                str13 = str7;
                str11 = str6;
                str12 = str5;
                str10 = str4;
                str2 = str3;
            }
            cursorQuery.close();
            try {
                callback2.invoke(Integer.valueOf(i2), jSONArray.toString());
            } catch (Exception e3) {
                callback3 = callback;
                try {
                    callback3.invoke(e3.getMessage());
                } catch (JSONException e4) {
                    e = e4;
                    callback3.invoke(e.getMessage());
                }
            }
        } catch (JSONException e5) {
            e = e5;
            callback3 = callback;
        }
    }

    private JSONObject getJsonFromCursor(Cursor cursor) throws JSONException {
        JSONObject jSONObject = new JSONObject();
        int columnCount = cursor.getColumnCount();
        String[] columnNames = cursor.getColumnNames();
        for (int i = 0; i < columnCount; i++) {
            try {
                int type = cursor.getType(i);
                if (type == 0) {
                    jSONObject.put(columnNames[i], (Object) null);
                } else if (type == 1) {
                    jSONObject.put(columnNames[i], cursor.getLong(i));
                } else if (type == 2) {
                    jSONObject.put(columnNames[i], cursor.getFloat(i));
                } else if (type == 3) {
                    jSONObject.put(columnNames[i], cursor.getString(i));
                } else if (type == 4) {
                    jSONObject.put(columnNames[i], cursor.getBlob(i));
                }
            } catch (Exception unused) {
                return null;
            }
        }
        return jSONObject;
    }

    @ReactMethod
    public void send(String str, String str2, Callback callback, Callback callback2) throws JSONException, PendingIntent.CanceledException {
        this.mActivity = getCurrentActivity();
        try {
            JSONArray jSONArray = new JSONObject(str).getJSONArray("addressList");
            int length = jSONArray.length();
            if (length <= 0) {
                PendingIntent activity = PendingIntent.getActivity(this.mActivity, 0, new Intent("android.intent.action.VIEW"), AccessibilityEventCompat.TYPE_VIEW_TARGETED_BY_SCROLL);
                Intent intent = new Intent("android.intent.action.VIEW");
                intent.putExtra("sms_body", str2);
                intent.setData(Uri.parse("sms:"));
                try {
                    activity.send(this.mActivity.getApplicationContext(), 0, intent);
                    callback2.invoke("OK");
                    return;
                } catch (PendingIntent.CanceledException e) {
                    callback.invoke(e.getMessage());
                    return;
                }
            }
            PendingIntent broadcast = PendingIntent.getBroadcast(this.mActivity, 0, new Intent("SENDING_SMS"), AccessibilityEventCompat.TYPE_VIEW_TARGETED_BY_SCROLL);
            SmsManager smsManager = SmsManager.getDefault();
            for (int i = 0; i < length; i++) {
                String strOptString = jSONArray.optString(i);
                if (strOptString.length() > 0) {
                    smsManager.sendTextMessage(strOptString, null, str2, broadcast, null);
                }
            }
        } catch (JSONException e2) {
            callback.invoke(e2.getMessage());
        }
    }

    @ReactMethod
    public void delete(Integer num, Callback callback, Callback callback2) {
        try {
            if (context.getContentResolver().delete(Uri.parse("content://sms/" + num), null, null) > 0) {
                callback2.invoke("OK");
            } else {
                callback.invoke("SMS not found");
            }
        } catch (Exception e) {
            callback.invoke(e.getMessage());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendEvent(ReactContext reactContext, String str, String str2) {
        ((DeviceEventManagerModule.RCTDeviceEventEmitter) reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit(str, str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendCallback(String str, boolean z) {
        Callback callback;
        Callback callback2;
        if (z && (callback2 = this.cb_autoSend_succ) != null) {
            callback2.invoke(str);
            this.cb_autoSend_succ = null;
        } else {
            if (z || (callback = this.cb_autoSend_err) == null) {
                return;
            }
            callback.invoke(str);
            this.cb_autoSend_err = null;
        }
    }

    @ReactMethod
    public void autoSend(String str, String str2, Callback callback, Callback callback2) {
        this.cb_autoSend_succ = callback2;
        this.cb_autoSend_err = callback;
        try {
            ArrayList<PendingIntent> arrayList = new ArrayList<>();
            ArrayList<PendingIntent> arrayList2 = new ArrayList<>();
            PendingIntent broadcast = PendingIntent.getBroadcast(context, 0, new Intent("SMS_SENT"), AccessibilityEventCompat.TYPE_VIEW_TARGETED_BY_SCROLL);
            PendingIntent broadcast2 = PendingIntent.getBroadcast(context, 0, new Intent("SMS_DELIVERED"), AccessibilityEventCompat.TYPE_VIEW_TARGETED_BY_SCROLL);
            context.registerReceiver(new BroadcastReceiver() { // from class: com.react.SmsModule.1
                @Override // android.content.BroadcastReceiver
                public void onReceive(Context context2, Intent intent) {
                    int resultCode = getResultCode();
                    if (resultCode == -1) {
                        SmsModule.this.sendCallback("SMS sent", true);
                        return;
                    }
                    if (resultCode == 1) {
                        SmsModule.this.sendCallback("Generic failure", false);
                        return;
                    }
                    if (resultCode == 2) {
                        SmsModule.this.sendCallback("Radio off", false);
                    } else if (resultCode == 3) {
                        SmsModule.this.sendCallback("Null PDU", false);
                    } else {
                        if (resultCode != 4) {
                            return;
                        }
                        SmsModule.this.sendCallback("No service", false);
                    }
                }
            }, new IntentFilter("SMS_SENT"));
            context.registerReceiver(new BroadcastReceiver() { // from class: com.react.SmsModule.2
                @Override // android.content.BroadcastReceiver
                public void onReceive(Context context2, Intent intent) {
                    int resultCode = getResultCode();
                    if (resultCode == -1) {
                        SmsModule smsModule = SmsModule.this;
                        smsModule.sendEvent(smsModule.mReactContext, "sms_onDelivery", "SMS delivered");
                    } else {
                        if (resultCode != 0) {
                            return;
                        }
                        SmsModule smsModule2 = SmsModule.this;
                        smsModule2.sendEvent(smsModule2.mReactContext, "sms_onDelivery", "SMS not delivered");
                    }
                }
            }, new IntentFilter("SMS_DELIVERED"));
            SmsManager smsManager = SmsManager.getDefault();
            ArrayList<String> arrayListDivideMessage = smsManager.divideMessage(str2);
            for (int i = 0; i < arrayListDivideMessage.size(); i++) {
                arrayList.add(i, broadcast);
                arrayList2.add(i, broadcast2);
            }
            smsManager.sendMultipartTextMessage(str, null, arrayListDivideMessage, arrayList, arrayList2);
            ContentValues contentValues = new ContentValues();
            contentValues.put("address", str);
            contentValues.put("body", str2);
            context.getContentResolver().insert(Uri.parse("content://sms/sent"), contentValues);
        } catch (Exception e) {
            sendCallback(e.getMessage(), false);
        }
    }
}
