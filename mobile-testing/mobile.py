'''Code generated by GPT , it doesnt make sense but it simulates mobile phone so yes'''

import requests
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64
import json

device_ip = ''
device_guid = ''


'''Creates the GUID from the ip with the secret key as IP'''
def generate_device_guid(ip):
    key = hashlib.sha256(ip.encode()).digest()[:16]
    cipher = AES.new(key, AES.MODE_ECB)
    padded_ip = pad(ip.encode(), AES.block_size)
    encrypted_ip = cipher.encrypt(padded_ip)
    encoded_ip = base64.b64encode(encrypted_ip).decode('utf-8')
    print(f"\n[GUID Generation]\nIP Address: {ip}\nGenerated GUID: {encoded_ip}")
    return encoded_ip

'''Fetches the check health endpoints response'''
def fetch_health_data(url):
    print("\n[Fetching Health Check Data]")
    response = requests.get(url)
    if response.status_code == 200:
        response_json = response.json()
        client_ip = response_json.get("client_ip", "IP not found")
        print(f"Server Detected IP: {client_ip}")
        return client_ip
    else:
        print(f"Failed to fetch health check data. Status Code: {response.status_code}")
        return None

'''Sends post request to /get_token_for_message to get a valid token'''
def send_guid(url, guid):
    print("\n[Sending Device GUID]")
    headers = {'Content-Type': 'application/json'}
    json_data = json.dumps({"device_guid": guid})
    response = requests.post(url, headers=headers, data=json_data)
    if response.status_code == 200:
        print(f"Response: {response.json()}")
    else:
        print(f"Failed to send GUID. Status Code: {response.status_code}")

'''Sends post request of the message to detect along with token'''
def send_message_to_detect(url, token):
    print("\n[Sending Message to Detect]")
    headers = {'Content-Type': 'application/json'}
    message = {"message": "Test message", "token": token}
    response = requests.post(url, headers=headers, data=json.dumps(message))
    if response.status_code == 200:
        print(f"Response: {response.json()}")
    else:
        print(f"Failed to send message. Status Code: {response.status_code}")

'''Just a simulation to see how server handles handing out tokens'''
def simulate_getting_token(check_health_url, get_token_url):
    global device_ip
    global device_guid
    device_ip = fetch_health_data(check_health_url)
    if device_ip:
        device_guid = generate_device_guid(device_ip)
        send_guid(get_token_url, device_guid)

'''Just a simulation to see how server rejects if someone tries to abuse API using fake tokens'''
def simulate_getting_token_with_custom_guid(check_health_url, get_token_url):
    ip = input("Enter a custom IP address to generate GUID: ")
    print(f"\n[Generating Custom GUID for IP: {ip}]")
    custom_guid = generate_device_guid(ip)
    send_guid(get_token_url, custom_guid)

def main():
    while True:
        print("\n[Menu]")
        print("1. Simulate Getting Token (Use server-detected IP)")
        print("2. Simulate Getting Token with Custom GUID (Enter your own IP)")
        print("3. Simulate Sending Message to Detect")
        print("4. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            url = input("Enter the base URL (e.g., https://yourvercelwebsite.com): ")
            check_health_url = url + '/check_health'
            get_token_url = url + '/get_token'
            simulate_getting_token(check_health_url, get_token_url)
        elif choice == '2':
            url = input("Enter the base URL (e.g., https://yourvercelwebsite.com): ")
            check_health_url = url + '/check_health'
            get_token_url = url + '/get_token'
            simulate_getting_token_with_custom_guid(check_health_url, get_token_url)
        elif choice == '3':
            token = input("Enter the token for your request: ")
            url = input("Enter the base URL (e.g., https://yourvercelwebsite.com): ")
            message_detection_url = url + '/message_detection' 
            send_message_to_detect(message_detection_url, token)
        elif choice == '4':
            print("Exiting program. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
